#!/usr/bin/env node
// Generate git information for the authoring tool
// Run this script to create git-info.json with current branch/commit

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

try {
  // Get git info from parent directory (where the main repo is)
  const parentDir = path.join(__dirname, '../../');
  
  const branch = execSync('git rev-parse --abbrev-ref HEAD', { 
    cwd: parentDir, 
    encoding: 'utf8' 
  }).trim();
  
  const commit = execSync('git rev-parse HEAD', { 
    cwd: parentDir, 
    encoding: 'utf8' 
  }).trim();
  
  const timestamp = new Date().toISOString();
  
  const gitInfo = {
    branch,
    commit,
    timestamp,
    generated: 'Generated by generate-git-info.js script'
  };
  
  // Write to public directory so it can be fetched by the React app
  const outputPath = path.join(__dirname, '../public/git-info.json');
  fs.writeFileSync(outputPath, JSON.stringify(gitInfo, null, 2));
  
  console.log(`Git info generated: ${branch} (${commit.substring(0, 8)})`);
  console.log(`Written to: ${outputPath}`);
  
} catch (error) {
  console.error('Failed to generate git info:', error.message);
  
  // Create fallback file
  const fallbackInfo = {
    branch: 'unknown',
    commit: 'unknown',
    timestamp: new Date().toISOString(),
    error: 'Failed to detect git info'
  };
  
  const outputPath = path.join(__dirname, '../public/git-info.json');
  fs.writeFileSync(outputPath, JSON.stringify(fallbackInfo, null, 2));
}