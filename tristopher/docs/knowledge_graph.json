{
  "metadata": {
    "generated": "2025-06-24",
    "description": "Comprehensive knowledge graph of the Tristopher habit formation app project",
    "version": "1.0.1",
    "project_location": "/Users/jpl/Dev/Apps/tristopher",
    "technology_stack": ["Flutter", "Dart", "Firebase", "Riverpod", "SQLite"],
    "environments": ["development", "staging", "production"]
  },
  "entities": [
    {
      "name": "Tristopher App",
      "entityType": "Flutter Application",
      "observations": [
        "Revolutionary habit formation app using 'anti-charity' wagering system",
        "Users stake money that goes to organizations they oppose if they fail daily goals",
        "Features a pessimistic robot personality that uses reverse psychology",
        "Built with Flutter and Riverpod state management",
        "Targets users who struggle with traditional habit-forming apps",
        "Based on behavioral economics principles like loss aversion and commitment devices",
        "Multi-environment setup: development, staging, and production",
        "Uses Firebase for backend services with separate projects per environment",
        "Version 1.0.1+2 currently in development",
        "Cross-platform app supporting iOS, Android, web, Windows, macOS, and Linux"
      ]
    },
    {
      "name": "Tristopher Robot Character",
      "entityType": "AI Personality",
      "observations": [
        "Pessimistic robot companion that provides brutally honest feedback",
        "Uses reverse psychology and tough love approach instead of positive reinforcement",
        "Employs dark humor and expects users to fail",
        "Has configurable personality levels (1-5) with brutal honesty mode",
        "Messages use Special Elite font for typewriter feel",
        "Designed to motivate through psychological reactance - proving the robot wrong",
        "Core differentiator from traditional cheerleader-style habit apps",
        "Conversation engine supports rich, interactive dialogue with branching paths"
      ]
    },
    {
      "name": "Anti-Charity Wagering System",
      "entityType": "Core Feature",
      "observations": [
        "Users place money at stake ($1 to $99) when setting up habits",
        "Money goes to organizations user actively opposes if they fail daily goals",
        "Leverages loss aversion - people twice as motivated to avoid losses vs gains",
        "Acts as commitment device making failure more costly",
        "Environment-specific stakes: $0.01 in dev, $0.10 in staging, $1+ in production",
        "Stakes are renewable after completion or failure",
        "Creates unprecedented motivation through value-contradiction consequences",
        "Integrated with payment processing system for real financial consequences"
      ]
    },
    {
      "name": "Flutter Architecture",
      "entityType": "Technical Architecture",
      "observations": [
        "Built with Flutter SDK version ^3.7.2 using Material Design",
        "Riverpod for state management with providers",
        "Organized into models, services, screens, widgets, and utilities",
        "Custom theming with Google Fonts (Cutive and Special Elite)",
        "Paper-themed background design with warm color palette (#FCFCF6)",
        "Responsive design with platform-specific considerations",
        "Local SQLite database for conversation data",
        "SharedPreferences for user preferences and data persistence",
        "Clean architecture with separation of concerns"
      ]
    },
    {
      "name": "Environment Configuration",
      "entityType": "DevOps Setup",
      "observations": [
        "Three-environment setup: development, staging, production",
        "Separate Firebase projects for each environment (tristopher-dev, tristopher-staging, tristopher-72b78)",
        "Environment-specific entry points: main.dart, main_dev.dart, main_staging.dart",
        "Different stake amounts per environment for testing",
        "Makefile with commands for each environment (make dev, make staging, make prod)",
        "Environment configuration in lib/config/environment.dart",
        "Separate .env files in config/ directory for each environment",
        "Environment-specific Firebase options files",
        "Proper isolation between environments for safe testing"
      ]
    },
    {
      "name": "Conversation Engine",
      "entityType": "System Component",
      "observations": [
        "Enhanced conversation system supporting rich, interactive dialogue",
        "Processes plot events and daily events based on user progress",
        "Supports branching conversations with user choices and text input",
        "Uses script-based content with localization support",
        "Manages conversation flow with proper response waiting",
        "Stores conversation history in local SQLite database",
        "Supports multiple message types, animations, and visual effects",
        "Tracks user state variables for personalized interactions",
        "Implements EnhancedMessageModel for rich messaging features"
      ]
    },
    {
      "name": "User Management System",
      "entityType": "System Component",
      "observations": [
        "UserModel tracks profile, goals, stakes, and progress",
        "Stores goal title, days of week, current stake amount, anti-charity choice",
        "Tracks streak count, longest streak, and last completion status",
        "Manages enrollment date and achievement unlocks",
        "Uses SharedPreferences for local data persistence",
        "Firebase Authentication for user accounts",
        "Daily check-in system with completion logging",
        "Achievement system with milestone tracking",
        "UserService handles all user data operations"
      ]
    },
    {
      "name": "Firebase Integration",
      "entityType": "Backend Services",
      "observations": [
        "Firebase Authentication for user accounts and security",
        "Cloud Firestore for user data and conversation state sync",
        "Firebase Storage for user-generated content and assets",
        "Firebase Analytics for user behavior tracking",
        "Separate Firebase projects for dev, staging, and production environments",
        "FlutterFire plugins: firebase_core ^3.13.1, firebase_auth ^5.5.4, cloud_firestore ^5.6.8",
        "Environment-specific configuration files in firebase/ directory",
        "Handles offline capabilities with local caching"
      ]
    },
    {
      "name": "Core Models",
      "entityType": "Data Models",
      "observations": [
        "UserModel: Complete user profile with goals, stakes, and progress tracking",
        "DailyLogModel: Tracks daily completion status and stake outcomes",
        "EnhancedMessageModel: Rich conversation messages with animations and interactions",
        "ScriptModel: Conversation scripts with plot events and daily triggers",
        "All models support JSON serialization for storage and Firebase sync",
        "Immutable design with copyWith methods for state updates",
        "Built-in validation and formatting helpers",
        "toRemove_message_model.dart indicates legacy model being phased out"
      ]
    },
    {
      "name": "Payment Processing",
      "entityType": "Financial System",
      "observations": [
        "Environment-specific payment handling for testing and production",
        "Test payments in development ($0.01) and staging ($0.10) environments",
        "Real payment processing in production environment ($1.00+)",
        "Stakes range from $1 to $99 for user flexibility",
        "Payment tiers as revenue stream with renewable stakes",
        "Integration with anti-charity organizations for failed goal transfers",
        "Currency formatting and validation throughout the app",
        "Stripe API integration with test/live mode switching"
      ]
    },
    {
      "name": "Main Chat Screen",
      "entityType": "UI Component",
      "observations": [
        "Primary interface where users interact with Tristopher robot",
        "Displays conversation history with enhanced chat bubbles",
        "Supports rich message types including options, input, and animations",
        "Auto-scrolls to new messages for smooth conversation flow",
        "Includes floating action buttons for menu and debug access",
        "Paper-themed background with drawer navigation",
        "Real-time conversation state management with Riverpod",
        "Debug panel for testing conversation scenarios in development",
        "Enhanced implementation in enhanced_main_chat_screen.dart"
      ]
    },
    {
      "name": "Enhanced Chat Bubble",
      "entityType": "UI Widget",
      "observations": [
        "Displays conversation messages with various visual styles",
        "Supports bubble styles: normal, glitch, typewriter, shake, fade, matrix, error",
        "Handles animation types: slideIn, fadeIn, bounce, glitch, typewriter, drop",
        "Text effects include bold, italic, rainbow, pulsing, shake",
        "Interactive options for user choices in conversations",
        "Input fields for text collection during conversations",
        "Styled with appropriate fonts for sender (Special Elite for Tristopher, Cutive for user)",
        "Configurable delays for natural conversation pacing"
      ]
    },
    {
      "name": "Goal Setup Screen",
      "entityType": "UI Component",
      "observations": [
        "Allows users to configure their daily habit goals",
        "Stake amount selection from $1 to $99",
        "Anti-charity organization selection from predefined options",
        "Goal schedule configuration (days of week)",
        "Goal title and description input",
        "Validation to ensure complete setup before activation",
        "Integration with user onboarding flow",
        "Real-time stake amount formatting and validation",
        "Located in screens/goal_stake/goal_screen.dart"
      ]
    },
    {
      "name": "Account Screen",
      "entityType": "UI Component",
      "observations": [
        "User profile and settings management interface",
        "Displays current user information and preferences",
        "Account management and authentication controls",
        "Integration with Firebase Authentication",
        "Paper-themed design consistent with app aesthetic",
        "Access through app drawer navigation"
      ]
    },
    {
      "name": "Splash Screen",
      "entityType": "UI Component",
      "observations": [
        "Initial loading screen shown on app startup",
        "Firebase initialization handling",
        "App branding and logo display",
        "Loading state management",
        "Transition to main application flow"
      ]
    },
    {
      "name": "App Drawer Navigation",
      "entityType": "UI Widget",
      "observations": [
        "Provides access to main app sections",
        "Links to Goal/Stake setup, Account settings",
        "Consistent paper-themed styling",
        "Handles navigation state management",
        "Integrated with overall app theme and colors",
        "Accessible from main chat screen",
        "Located in widgets/common/drawer/app_drawer.dart"
      ]
    },
    {
      "name": "User Onboarding Flow",
      "entityType": "User Experience",
      "observations": [
        "Guides new users through app setup and concept explanation",
        "Introduces the anti-charity wagering concept",
        "Helps users select meaningful anti-charity organizations",
        "Explains Tristopher's personality and interaction style",
        "Collects user goals and preferred stake amounts",
        "Sets up initial conversation context and variables",
        "Ensures users understand the commitment they're making",
        "Prepares users for the psychological approach of the app",
        "Managed by OnboardingService"
      ]
    },
    {
      "name": "Achievement System",
      "entityType": "Gamification Feature",
      "observations": [
        "Tracks milestone achievements like 7-day and 30-day streaks",
        "Special achievements for failures ('First Failure: Welcome to reality!')",
        "66-day challenge completion tracking",
        "Achievement unlocks stored with timestamps",
        "Visual achievement notifications with confetti effects",
        "Achievement data integrated with conversation system",
        "Motivational messaging aligned with Tristopher's personality",
        "Progress tracking across user's entire journey",
        "Implemented in services/achievement_service.dart"
      ]
    },
    {
      "name": "Daily Logging System",
      "entityType": "Data Management",
      "observations": [
        "Records daily completion status for habit tracking",
        "Tracks stake amounts and whether stakes were lost",
        "Maintains completion history for analytics and trends",
        "Updates user streak counts automatically",
        "Stores logs with date keys for efficient retrieval",
        "Handles streak resets on failures",
        "Provides data for conversation system context",
        "Enables retrospective analysis of user patterns",
        "DailyLogModel handles individual log entries"
      ]
    },
    {
      "name": "SQLite Database",
      "entityType": "Local Storage",
      "observations": [
        "Local database for conversation system storage using sqflite ^2.3.0",
        "Stores chat history and conversation state",
        "ConversationDatabase class handles database operations",
        "Offline data persistence for conversations",
        "Cross-platform compatibility",
        "Efficient storage for conversation history and user interactions",
        "Located in utils/database/conversation_database.dart"
      ]
    },
    {
      "name": "Riverpod State Management",
      "entityType": "State Management",
      "observations": [
        "flutter_riverpod ^2.6.1 for reactive state management",
        "Providers for user data, onboarding, and chat messages",
        "ChatMessagesNotifier for conversation state",
        "Service providers for user and onboarding services",
        "Future providers for async data loading",
        "State providers for UI state management",
        "Located in providers/ directory"
      ]
    },
    {
      "name": "Development Tools",
      "entityType": "Development Support",
      "observations": [
        "Makefile with comprehensive development commands",
        "Build scripts for different environments and platforms",
        "Firebase setup automation scripts",
        "Environment verification scripts",
        "Flutter launcher icons configuration",
        "Code analysis and formatting tools",
        "Debug panel for conversation testing",
        "Located in scripts/ directory"
      ]
    },
    {
      "name": "Asset Management",
      "entityType": "Resource Management",
      "observations": [
        "Paper texture images for UI theming",
        "Tristopher logo and branding assets",
        "Localization files for internationalization",
        "Script files for conversation content",
        "Firebase configuration files for each environment",
        "Icon assets and launcher icons",
        "Organized in assets/ directory structure"
      ]
    },
    {
      "name": "Testing Infrastructure",
      "entityType": "Quality Assurance",
      "observations": [
        "Flutter test framework integration",
        "flutter_lints ^5.0.0 for code quality",
        "Analysis options configuration",
        "Test dependencies including sqflite_common_ffi for desktop testing",
        "Environment-specific testing with different stake amounts",
        "Debug features for conversation system testing"
      ]
    },
    {
      "name": "Paper Background Design",
      "entityType": "UI Design Element",
      "observations": [
        "Custom paper-themed background widget",
        "Vintage aesthetic with texture overlays",
        "Consistent throughout the application",
        "Creates warm, approachable feel despite tough robot personality",
        "Located in widgets/common/paper_background_widget.dart"
      ]
    },
    {
      "name": "Conversation Debug Panel",
      "entityType": "Development Tool",
      "observations": [
        "Debug interface for testing conversation scenarios",
        "Available in development environment",
        "Allows manual triggering of conversation events",
        "Testing tool for conversation flow validation",
        "Located in widgets/debug/conversation_debug_panel.dart"
      ]
    },
    {
      "name": "Localization System",
      "entityType": "Internationalization",
      "observations": [
        "LocalizationManager for multi-language support",
        "Conversation scripts support localization",
        "Localization assets in assets/localization/",
        "Prepared for international market expansion",
        "Part of conversation engine architecture"
      ]
    },
    {
      "name": "Script Management System",
      "entityType": "Content Management",
      "observations": [
        "ScriptManager and ScriptModel for conversation content",
        "Structured approach to conversation scripting",
        "Supports plot events and daily interaction triggers",
        "Separates content from code for easier maintenance",
        "Located in models/conversation/ directory"
      ]
    },
    {
      "name": "Business Model",
      "entityType": "Revenue Strategy",
      "observations": [
        "Payment tiers from $1 to $99 one-time payments",
        "Stakes renewable after completion or failure",
        "Program 66: Advanced tracking with higher stakes",
        "Customizable robot personality as premium feature",
        "Targets $41 billion self-improvement market",
        "Multiple revenue streams through stake renewals and premium features"
      ]
    },
    {
      "name": "Target Market",
      "entityType": "Customer Segments",
      "observations": [
        "Primary demographics: 23-42 years old, tech-savvy with strong opinions",
        "Income levels from students ($25,000) to professionals ($120,000+)",
        "Four customer segments: Habit Formation Strugglers, Negative Reinforcement Responders, Financial Stakes Motivators, Strong Opinion Holders",
        "Users who appreciate dark humor and have failed with traditional habit apps",
        "Market opportunity in $41 billion self-improvement market growing at 6.7% annually",
        "92% of habit app users report dissatisfaction with current offerings"
      ]
    },
    {
      "name": "Behavioral Psychology Foundation",
      "entityType": "Scientific Basis",
      "observations": [
        "Loss aversion theory by Kahneman & Tversky (1979)",
        "Commitment devices research by Bryan et al. (2010)",
        "Psychological reactance theory by Brehm (1966)",
        "Value-based motivation connecting failure to identity contradiction",
        "Negative reinforcement proven more effective than positive for certain users",
        "Scientific validation for app's core psychological mechanisms"
      ]
    }
  ],
  "relations": [
    {
      "from": "Tristopher App",
      "to": "Tristopher Robot Character",
      "relationType": "features"
    },
    {
      "from": "Tristopher App",
      "to": "Anti-Charity Wagering System",
      "relationType": "implements"
    },
    {
      "from": "Tristopher App",
      "to": "Flutter Architecture",
      "relationType": "built_with"
    },
    {
      "from": "Tristopher App",
      "to": "Firebase Integration",
      "relationType": "uses"
    },
    {
      "from": "Tristopher App",
      "to": "Target Market",
      "relationType": "targets"
    },
    {
      "from": "Tristopher Robot Character",
      "to": "Conversation Engine",
      "relationType": "powered_by"
    },
    {
      "from": "Tristopher Robot Character",
      "to": "Behavioral Psychology Foundation",
      "relationType": "applies"
    },
    {
      "from": "Anti-Charity Wagering System",
      "to": "Payment Processing",
      "relationType": "requires"
    },
    {
      "from": "Anti-Charity Wagering System",
      "to": "User Management System",
      "relationType": "integrates_with"
    },
    {
      "from": "Anti-Charity Wagering System",
      "to": "Behavioral Psychology Foundation",
      "relationType": "based_on"
    },
    {
      "from": "Flutter Architecture",
      "to": "Core Models",
      "relationType": "includes"
    },
    {
      "from": "Flutter Architecture",
      "to": "Riverpod State Management",
      "relationType": "uses"
    },
    {
      "from": "Environment Configuration",
      "to": "Firebase Integration",
      "relationType": "configures"
    },
    {
      "from": "Environment Configuration",
      "to": "Payment Processing",
      "relationType": "configures"
    },
    {
      "from": "Environment Configuration",
      "to": "Development Tools",
      "relationType": "managed_by"
    },
    {
      "from": "Conversation Engine",
      "to": "Core Models",
      "relationType": "uses"
    },
    {
      "from": "Conversation Engine",
      "to": "SQLite Database",
      "relationType": "stores_data_in"
    },
    {
      "from": "Conversation Engine",
      "to": "Script Management System",
      "relationType": "uses"
    },
    {
      "from": "Conversation Engine",
      "to": "Localization System",
      "relationType": "supports"
    },
    {
      "from": "User Management System",
      "to": "Core Models",
      "relationType": "manages"
    },
    {
      "from": "User Management System",
      "to": "Firebase Integration",
      "relationType": "syncs_with"
    },
    {
      "from": "Firebase Integration",
      "to": "Environment Configuration",
      "relationType": "configured_by"
    },
    {
      "from": "Main Chat Screen",
      "to": "Enhanced Chat Bubble",
      "relationType": "contains"
    },
    {
      "from": "Main Chat Screen",
      "to": "Conversation Engine",
      "relationType": "displays_output_from"
    },
    {
      "from": "Main Chat Screen",
      "to": "App Drawer Navigation",
      "relationType": "includes"
    },
    {
      "from": "Main Chat Screen",
      "to": "Paper Background Design",
      "relationType": "uses"
    },
    {
      "from": "Enhanced Chat Bubble",
      "to": "Tristopher Robot Character",
      "relationType": "displays_messages_from"
    },
    {
      "from": "Goal Setup Screen",
      "to": "Anti-Charity Wagering System",
      "relationType": "configures"
    },
    {
      "from": "Goal Setup Screen",
      "to": "User Onboarding Flow",
      "relationType": "part_of"
    },
    {
      "from": "Account Screen",
      "to": "User Management System",
      "relationType": "manages"
    },
    {
      "from": "Account Screen",
      "to": "Firebase Integration",
      "relationType": "uses"
    },
    {
      "from": "Splash Screen",
      "to": "Firebase Integration",
      "relationType": "initializes"
    },
    {
      "from": "App Drawer Navigation",
      "to": "Goal Setup Screen",
      "relationType": "navigates_to"
    },
    {
      "from": "App Drawer Navigation",
      "to": "Account Screen",
      "relationType": "navigates_to"
    },
    {
      "from": "User Onboarding Flow",
      "to": "User Management System",
      "relationType": "initializes"
    },
    {
      "from": "Achievement System",
      "to": "Daily Logging System",
      "relationType": "triggered_by"
    },
    {
      "from": "Achievement System",
      "to": "Conversation Engine",
      "relationType": "provides_context_to"
    },
    {
      "from": "Daily Logging System",
      "to": "User Management System",
      "relationType": "updates"
    },
    {
      "from": "Daily Logging System",
      "to": "Core Models",
      "relationType": "uses"
    },
    {
      "from": "SQLite Database",
      "to": "Flutter Architecture",
      "relationType": "runs_on"
    },
    {
      "from": "Riverpod State Management",
      "to": "Firebase Integration",
      "relationType": "synchronizes_with"
    },
    {
      "from": "Development Tools",
      "to": "Environment Configuration",
      "relationType": "manages"
    },
    {
      "from": "Development Tools",
      "to": "Testing Infrastructure",
      "relationType": "includes"
    },
    {
      "from": "Asset Management",
      "to": "Paper Background Design",
      "relationType": "provides_resources_for"
    },
    {
      "from": "Asset Management",
      "to": "Localization System",
      "relationType": "contains"
    },
    {
      "from": "Testing Infrastructure",
      "to": "Flutter Architecture",
      "relationType": "validates"
    },
    {
      "from": "Conversation Debug Panel",
      "to": "Conversation Engine",
      "relationType": "tests"
    },
    {
      "from": "Conversation Debug Panel",
      "to": "Development Tools",
      "relationType": "part_of"
    },
    {
      "from": "Script Management System",
      "to": "Core Models",
      "relationType": "implements"
    },
    {
      "from": "Business Model",
      "to": "Anti-Charity Wagering System",
      "relationType": "monetizes"
    },
    {
      "from": "Business Model",
      "to": "Payment Processing",
      "relationType": "requires"
    },
    {
      "from": "Target Market",
      "to": "Behavioral Psychology Foundation",
      "relationType": "responds_to"
    }
  ]
}